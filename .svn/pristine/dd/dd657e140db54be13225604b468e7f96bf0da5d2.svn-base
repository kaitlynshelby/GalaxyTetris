/*
 * TCSS 305 - Spring 2016
 * Assignment 6 - Tetris 
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.geom.Rectangle2D;
import java.util.HashMap;
import java.util.Map;
import java.util.Observer;

import javax.swing.AbstractAction;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.Timer;
import model.Board;

/**
 * An interactive playing area for the Tetris GUI.
 * 
 * @author Kaitlyn Kinerk
 * @version 1.0
 */
@SuppressWarnings("serial")
public class TetrisBoard extends JPanel implements Observer {
    
    /** Light Blue: The color to paint an "I" piece. */
    public static final Color I_COLOR = new Color(160, 151, 188);
    
    /** Navy Blue: The color to paint an "O" piece. */
    public static final Color O_COLOR = new Color(51, 62, 108);
    
    /** Magenta: The color to paint a "J" piece. */
    public static final Color J_COLOR = new Color(213, 0, 117);
    
    /** Lavender: The color to paint an "L" piece. */
    public static final Color L_COLOR = new Color(163, 105, 238);
    
    /** Orchid: The color to paint a "Z" piece. */
    public static final Color Z_COLOR = new Color(193, 16, 208);
    
    /** Pink: The color to paint an "S" piece. */
    public static final Color S_COLOR = new Color(255, 4, 255);
    
    /** Purple: The color to paint a "T" piece. */
    public static final Color T_COLOR = new Color(104, 39, 165);
    
    /** An invisible "placeholder" color to paint empty grid squares. */
    public static final Color NO_COLOR = new Color(0, 0, 0, 0);
    
    /** A transparent color that overlays the screen when the game is paused or over. */
    public static final Color STOPPED_COLOR = new Color(0, 0, 0, 230);

    /** The scale for a small playing board. */
    public static final int SMALL = 1;
    
    /** The scale for a medium playing board. (Note: This is the default scale)*/
    public static final int MEDIUM = 2;
    
    /** The scale for a large playing board. */
    public static final int LARGE = 3;
    
    /** The scale for an extra-large playing board. */
    public static final int X_LARGE = 4;
    
    /** A scalable width for the playing area. */
    public static final int WIDTH = 100;
    
    /** A scalable height for the playing area. */
    public static final int HEIGHT = 200;
    
    /** The size of the edge of a grid square.*/
    public static final int GRID_EDGE = 10;
    
    /** The default timer delay. */
    public static final int TIMER_DELAY = 1000;
    
    /** The font type this panel will use to display messages. */
    public static final String FONT_TYPE = "Agency FB";
    
    /** A scalable font size. */
    public static final int FONT_SIZE = 20;
    
    /** The length of the string representing the preview area of a Tetris board. */
    public static final int PREVIEW_BOARD_STRING_LENGTH = 65;
    
    /** The length of a string representing a single row of a Tetris board. */
    public static final int SINGLE_LINE_LENGTH = 13;
    
    /** The thickness of the outline to paint around a single Tetris block. */
    public static final float STROKE_WIDTH = 2;
    
    /** Stores data regarding the color to paint a specific Tetris shape. */
    public static final Map<Character, Color> COLOR_MAP = TetrisBoard.createColorMap();
    
    /** A Swing timer. */
    private final Timer myTimer;
    
    /** The back-end board for this UI board. */
    private final Board myBoard;

    /** A string representing a playable Tetris board. */
    private String myBoardString;

    /** Whether or not the game is over. */
    private boolean myGameOver;

    /** The scale of the board. */
    private final int myScale;
    
    /**
     * Constructs a new TetrisBoard.
     * 
     * @param theBoard the back-end board this class will communicate with.
     */
    public TetrisBoard(final Board theBoard) {
        super();
        myTimer = new Timer(TIMER_DELAY, new TimerListener());
        myBoard = theBoard;
        myGameOver = false;
        myBoardString = myBoard.toString();
        myScale = MEDIUM;
        setupBoard();
    }
    
    /**
     * Helps the constructor set up the board by enabling key bindings, starting the timer, 
     * starting a new game, and setting the board's size and background color.
     */
    private void setupBoard() {
        enableKeyBindings();
        myTimer.start();
        myBoard.newGame();

        setMaximumSize(new Dimension(WIDTH * myScale, HEIGHT * myScale));
        setBackground(Color.BLACK); 
    }
    

    /**
     * Sets up key bindings.
     */
    @SuppressWarnings("serial")
    private void enableKeyBindings() {
        // I have chosen to ignore the warnings for these strings because they mainly serve
        // as markers to easily determine which key performs which action.
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), "left");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), "right");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), "down");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), "rotateCW");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), "drop");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_P, 0), "pause");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, 0), "rotateCCW");
        
        getActionMap().put("left", new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myBoard.left();
            }
        });
        
        getActionMap().put("right", new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myBoard.right();
            }
        });
        
        getActionMap().put("down", new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myBoard.down();
            }
        });
        
        getActionMap().put("rotateCW", new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myBoard.rotateCW();
            }
        });
        
        getActionMap().put("rotateCCW", new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myBoard.rotateCCW();
            }
        });
        
        getActionMap().put("right", new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myBoard.right();
            }
        });
        
        getActionMap().put("drop", new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myBoard.drop();
            }
        });
        
        getActionMap().put("pause", new AbstractAction() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                pauseTimer();
            }
        });   
    }
    
    /**
     * Creates the color map to use with all instances of this class.
     * 
     * @return a collection of mappings from characters to colors.
     */
    private static Map<Character, Color> createColorMap() {
        
        final Map<Character, Color> map = new HashMap<Character, Color>();
        map.put(' ', NO_COLOR);
        map.put('I', I_COLOR);
        map.put('0', O_COLOR);
        map.put('J', J_COLOR);
        map.put('L', L_COLOR);
        map.put('Z', Z_COLOR);
        map.put('S', S_COLOR);
        map.put('T', T_COLOR);
        return map;
    }
    
    /**
     * Returns the scale of the board.
     * 
     * @return the scale of the board.
     */
    public int getScale() {
        return myScale;
    }
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
       

        int x = 0;
        int y = 0;
        // Loop through string representation of board ignoring the characters representing 
        // the area above the board and the last line of the board.
        for (int i = PREVIEW_BOARD_STRING_LENGTH; 
                        i < myBoardString.length() - SINGLE_LINE_LENGTH; i++) {
            
            // ignore characters that represent board edges
            if (COLOR_MAP.containsKey(myBoardString.charAt(i))) {
                
                g2d.setPaint(COLOR_MAP.get(myBoardString.charAt(i)));
                g2d.fill(new Rectangle2D.Double(x, y, GRID_EDGE * myScale,
                                                GRID_EDGE * myScale));
                
                // paint outline on tetris blocks only
                if (myBoardString.charAt(i) != ' ') {
                    g2d.setStroke(new BasicStroke(STROKE_WIDTH));
                    g2d.setPaint(Color.WHITE);  
                    g2d.draw(new Rectangle2D.Double(x, y, GRID_EDGE * myScale, 
                                            GRID_EDGE * myScale));
                }
                // advance x and y coordinates as necessary
                x += GRID_EDGE * myScale;
                if (x == WIDTH * myScale) {
                    x = 0;
                    y += GRID_EDGE * myScale;
                }
            }
        }
        
        // display paused screen
        g2d.setFont(new Font(FONT_TYPE, Font.PLAIN, myScale * FONT_SIZE));
        if (!myTimer.isRunning()) {
            g2d.setPaint(STOPPED_COLOR);
            g2d.fill(new Rectangle2D.Double(0, 0, WIDTH * myScale, HEIGHT * myScale));
            g2d.setPaint(Color.WHITE);
            drawCenteredString("Paused", g2d);
        }
        
        // display game over screen
        if (myGameOver) {
            g2d.setPaint(STOPPED_COLOR);
            g2d.fill(new Rectangle2D.Double(0, 0, WIDTH * myScale, HEIGHT * myScale));
            g2d.setPaint(Color.WHITE);
            drawCenteredString("Game Over", g2d);  
        }
    }
    
    /**
     * Draws a string centered horizontally and vertically on the panel.
     * 
     * @param theString the string to center.
     * @param theGraphics the graphics object used for painting.
     */
    private void drawCenteredString(final String theString, final Graphics2D theGraphics) {
        final String str = theString;
        int strWidth = 0;
        int strAscent = 0;
        int x = 0;
        int y = 0;
        final FontMetrics fm = theGraphics.getFontMetrics();
        
        strWidth = fm.stringWidth(str);
        strAscent = fm.getAscent();
        x = WIDTH * myScale / 2 - strWidth / 2;
        y = HEIGHT * myScale / 2 + strAscent / 2;
        theGraphics.drawString(str, x, y);
    }
    
    /**
     * Pauses or resumes the timer as appropriate.
     */
    public void pauseTimer() {
        if (myTimer.isRunning()) {
            myTimer.stop();
            disableKeyBindings();
            repaint();
        } else {
            myTimer.start();
            enableKeyBindings();
            repaint();
        }
    }
    
    /**
     * Helper for pauseTimer(). Disables all key bindings except pause.
     */
    private void disableKeyBindings() {
        // I am ignoring this warning for the same reason I mentioned in enableKeyBindings()
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), "none");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), "none");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), "none");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), "none");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), "none");
        getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, 0), "none");
    }
    

    /**
     * Repaints the board based on the updated string representation of the board.
     */
    @Override
    public void update(final java.util.Observable theObj, final Object theArg) {
        if (theArg instanceof String) {
            myBoardString = (String) theArg;
            repaint();
        } else if (theArg instanceof Boolean) {
            myGameOver = true;
        }
    }

    /**
     * A listener for the timer which advances the board one step.
     */
    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myBoard.step();
        }
    }
}
