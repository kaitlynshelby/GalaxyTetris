/*
 * TCSS 305 - Spring 2016
 * Assignment 6 - Tetris
 */
package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

/**
 * A game information panel to display score, current level, lines cleared, and any other 
 * relevant information on the Tetris GUI. 
 * 
 * @author Kaitlyn Kinerk
 * @version 1.0
 *
 */
@SuppressWarnings("serial")
public class InfoPanel extends JPanel implements Observer {
    
    /** A scalable width for this panel. */
    public static final int WIDTH = 100;
    
    /** A scalable height for this panel. */
    public static final int HEIGHT = 125;
    
    /** The background color for this panel. */
    public static final Color BG_COLOR = new Color(0, 0, 0, 100);
    
    /** The scale to use when sizing this panel. */
    private final int myScale;
    
    /**
     * Constructs an InfoPanel.
     * 
     * @param theBoard the Tetris board which determines the scale of this panel.
     */
    public InfoPanel(TetrisBoard theBoard) {
        myScale = theBoard.getScale();
        setMaximumSize(new Dimension(WIDTH * myScale, HEIGHT * myScale));
        setBackground(BG_COLOR);
    }
    
    
    /* This paintComponent method is a work in progress. I am experimenting with how I want 
    * to draw my Strings. Many values are hard-coded right now as I am trying to figure out 
    * how I want to relate them to the scale of the board, but I am planning on replacing all 
    * hard-coded values with constants once I figure out how I want this panel to look.
    */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
     
        g2d.setFont(new Font("Agency FB", Font.PLAIN, myScale * 10));
        
        // draw shadow
        g2d.setPaint(TetrisBoard.STOPPED_COLOR);
        drawCenteredString("- Level 1 -", (Graphics2D) theGraphics, myScale + 2, 
                           myScale * 17 + 3);
        g2d.setPaint(Color.WHITE);
        drawCenteredString("- Level 1 -", (Graphics2D) theGraphics, 0, myScale * 17);

        
        
    }

    /** 
     * Draws a "centered" string using the passed x parameter as the starting point to center
     * from.
     * 
     * @param theString the string to center.
     * @param theGraphics the graphics object used for painting.
     * @param theX the x-coordinate to use as a starting point to center from.
     * @param theY the y-coordinate to use for drawing the string.
     */
    private void drawCenteredString(final String theString, final Graphics2D theGraphics, 
                                    final int theX, final int theY) {
        final String str = theString;
        int strWidth = 0;
        int x = theX;
        final FontMetrics fm = theGraphics.getFontMetrics();
        
        strWidth = fm.stringWidth(str);
        x = WIDTH * myScale / 2 - strWidth / 2 + theX;
        theGraphics.drawString(str, x, theY);
    }
    


    @Override
    public void update(Observable o, Object arg) {
        //repaint();
    }
    
}
