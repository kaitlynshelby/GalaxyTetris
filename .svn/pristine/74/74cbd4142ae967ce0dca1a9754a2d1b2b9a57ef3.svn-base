/*
 * TCSS 305 - Spring 2016
 * Assignment 6 - Tetris 
 */
package view;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

import model.Board;

/**
 * A menu bar for the Tetris GUI.
 * 
 * @author Kaitlyn Kinerk
 * @version 1.0
 */
@SuppressWarnings("serial")
public class MenuBar extends JMenuBar {
    
    /** The frame this menu bar was added to.*/
    private final Component myFrame;
    
    /** The Tetris board this menu bar works with. */
   private final TetrisBoard myTetrisBoard;

    private Board myBoard;
    
    /**
     * Constructs a menu bar to use with the Tetris GUI.
     * 
     * @param theFrame the JFrame this menu bar was added to.
     * @param theBoard the TetrisBoard this menu bar communicates with.
     */
    public MenuBar(final JFrame theFrame, final Board theBoard, TetrisBoard theTetrisBoard) {
        super();
        myTetrisBoard = theTetrisBoard;
        myBoard = theBoard;
        myFrame = theFrame;
        
        addGameMenu();
        addOptionsMenu();
        addHelpMenu();
    }

    /**
     * Adds a complete game menu to the menu bar.
     */
    private void addGameMenu() {
        
        final JMenu gameMenu = new JMenu("Game");
        gameMenu.setMnemonic(KeyEvent.VK_G);
        
        // create new game button
        final JMenuItem newGame = new JMenuItem("New Game");
        newGame.setMnemonic(KeyEvent.VK_N);
        newGame.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                // open game mode selection dialog
                int result = JOptionPane.showOptionDialog(myFrame, 
                                               "Are you sure you want to start a new game?", 
                                               "Start New Game",
                                               JOptionPane.YES_NO_CANCEL_OPTION, 
                                               JOptionPane.QUESTION_MESSAGE, null, null, 
                                               JOptionPane.NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                    myBoard.newGame();
                }
            }
        });
        
        // create end game button
        final JMenuItem endGame = new JMenuItem("End Game");
        endGame.setMnemonic(KeyEvent.VK_E);
        endGame.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                
            }  
        });

        final JMenuItem quit = new JMenuItem("Quit");
        quit.setMnemonic(KeyEvent.VK_Q);
        quit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                // quit
            }
        });
        
        gameMenu.add(newGame);
        gameMenu.add(endGame);
        gameMenu.addSeparator();
        gameMenu.add(quit);
        add(gameMenu);
    }
    
    /**
     * Adds a complete options menu to the menu bar.
     */
    private void addOptionsMenu() {
        
        final JMenu optionsMenu = new JMenu("Options");
        optionsMenu.setMnemonic(KeyEvent.VK_O);
        
        final JMenuItem controls = new JMenuItem("Control Settings...");
        controls.setMnemonic(KeyEvent.VK_C);
        controls.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                // open control settings dialog   
            }
        });
        
        final JMenuItem boardSettings = new JMenuItem("Game Board Settings...");
        boardSettings.setMnemonic(KeyEvent.VK_G);
        boardSettings.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                // open game board settings dialog
            } 
        });
        
        final JCheckBoxMenuItem soundEnabled = new JCheckBoxMenuItem("Sound/Music On");
        soundEnabled.setMnemonic(KeyEvent.VK_S);
        soundEnabled.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                // enable/disable sound
            }
        });
        
        final JCheckBoxMenuItem ghostPiece = new JCheckBoxMenuItem("Show Ghost Piece");
        ghostPiece.setMnemonic(KeyEvent.VK_P);
        ghostPiece.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                // display ghost piece
            }    
        });
        
        optionsMenu.add(controls);
        optionsMenu.add(boardSettings);
        optionsMenu.addSeparator();
        optionsMenu.add(soundEnabled);
        optionsMenu.add(ghostPiece);
        add(optionsMenu);
        
    }
    
    /**
     * Adds a complete help menu to the menu bar.
     */
    private void addHelpMenu() {
        
        final JMenu helpMenu = new JMenu("Help");
        helpMenu.setMnemonic(KeyEvent.VK_H);
        
        final JMenuItem howTo = new JMenuItem("Controls...");
        howTo.setMnemonic(KeyEvent.VK_P);
        howTo.addActionListener(new ActionListener() {


            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myTetrisBoard.pauseTimer();
                final String controlInfo = 
                                "Move Left: Left Arrow"
                                + "\nMove Right: Right Arrow"
                                + "\nMove Down: Down Arrow"
                                + "\nDrop: Space\n"
                                + "\nRotate Clockwise: Up Arrow"
                                + "\nRotate Counter-Clockwise: Z\n"
                                + "\nPause: P";
                Icon icon = new ImageIcon("icon.gif");
                JOptionPane.showMessageDialog(myFrame, controlInfo, "Controls", 
                                              JOptionPane.INFORMATION_MESSAGE, 
                                              icon);
                
                myTetrisBoard.pauseTimer();
            }
        });
        
        final JMenuItem about = new JMenuItem("About...");
        about.setMnemonic(KeyEvent.VK_A);
        about.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                // open about pane
            }
        });
        
        helpMenu.add(howTo);
        helpMenu.addSeparator();
        helpMenu.add(about);
        add(helpMenu);
        
    }
}
