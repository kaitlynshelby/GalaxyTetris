/*
 * TCSS 305 - Spring 2016
 * Assignment 6 - Tetris
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

/**
 * A game information panel to display score, current level, lines cleared, and any other 
 * relevant information on the Tetris GUI. 
 * 
 * @author Kaitlyn Kinerk
 * @version 1.0
 *
 */
@SuppressWarnings("serial")
public class InfoPanel extends JPanel implements Observer {
    
    /** A scalable width for this panel. */
    public static final int WIDTH = 270;

    
    /** The background color for this panel. */
    public static final Color BG_COLOR = new Color(0, 0, 0, 0);


    private int myLinesCleared;
    
    private int myLinesTilNextLevel;

    private int myHeight;

    private int myScore;
    
    private int myLevel;


    private TetrisBoard myTetrisBoard;

    
    /**
     * Constructs an InfoPanel.
     *
     */
    public InfoPanel(int theHeight, TetrisBoard theTetrisBoard) {
        myTetrisBoard = theTetrisBoard;
        myLinesTilNextLevel = 5;
        myLinesCleared = 0;         
        myScore = 0;
        myLevel = 1;
        myHeight = theHeight;
        setPreferredSize(new Dimension(WIDTH, myHeight));
        setBackground(Color.BLACK);
   
    }
    
    

    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setFont(new Font("Agency FB", Font.PLAIN, 45));
        
        // draw ~SCORE~ and value
        // draw shadow for ~SCORE~ and score value
//        g2d.setPaint(new Color(163, 105, 238, 200));
//        drawCenteredString("~SCORE~", g2d, 2, 52);
        g2d.setPaint(Color.WHITE);
        drawCenteredString("SCORE", g2d, 0, 60);
      
        g2d.setFont(new Font("Agency FB", Font.PLAIN, 30));
        g2d.setPaint(Color.WHITE);
        drawCenteredString(""+ myScore, g2d, 0, 100);
       
        
        g2d.setColor(Color.WHITE);
        g2d.setFont(new Font("Agency FB", Font.PLAIN, 25));
        
        g2d.drawString("Level: " + myLevel, 20, 160);
        g2d.drawString("Lines cleared: " + myLinesCleared, 20, 190);
        g2d.drawString("Lines to next level: " + myLinesTilNextLevel, 20, 220);
        
        g2d.drawString("P - Pause ", 20, 290);
        g2d.drawString("C - View controls ", 20, 320);
        g2d.drawString("N - Start new game", 20, 350);
        
    }

    /** 
     * Draws a "centered" string using the passed x parameter as the starting point to center
     * from.
     * 
     * @param theString the string to center.
     * @param theGraphics the graphics object used for painting.
     * @param theX the x-coordinate to use as a starting point to center from.
     * @param theY the y-coordinate to use for drawing the string.
     */
    private void drawCenteredString(final String theString, final Graphics2D theGraphics, 
                                    final int theX, final int theY) {
        final String str = theString;
        int strWidth = 0;
        int x = theX;
        final FontMetrics fm = theGraphics.getFontMetrics();
        
        strWidth = fm.stringWidth(str);
        x = WIDTH / 2 - strWidth / 2 + theX;
        theGraphics.drawString(str, x, theY);
    }
    


    @Override
    public void update(final Observable theObj, final Object theArgs) {
        if (theArgs instanceof Object[]) {
            myLinesCleared += ((Object[]) theArgs).length;
            myLevel = myLinesCleared / 5 + 1;
            myLinesTilNextLevel -= 1;
            if (myLinesTilNextLevel == 0) {
                myLinesTilNextLevel = 5;
            }
            myScore += 100 * myLevel * ((Object[]) theArgs).length;
            if (myLinesCleared % 5 == 0) {
                myTetrisBoard.faster();
            }
            repaint();
        } 
      
    }




}


